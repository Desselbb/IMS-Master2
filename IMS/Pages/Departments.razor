@page "/departments"
@using IMSClassLibrary.Models;
@using IMSClassLibrary.Repos;
@using IMS.Pages;
@inject UserRepository userRepository
@inject DepartmentRepository departmentRepository
@inject ModuleRepository moduleRepository
@inject Authorisation authorisation
@inject NotificationService NotificationService;
@inject NavigationManager UriHelper
@inject IHttpContextAccessor httpContextAccessor;
@using IMSClassLibrary.Context;
@using Microsoft.EntityFrameworkCore
@inject IServiceProvider ServiceProvider
@inject IJSRuntime js

<PageTitle>Departments</PageTitle>
<br />
<div class="container-fluid">
    <div class="page-breadcrumb d-none d-sm-flex align-items-center mb-3">
        <div class="breadcrumb-title pe-3"><h2>Departments</h2></div>
        <div class="ms-auto">
            <div class="btn-group">
                <button class="btn btn-primary" @onclick="ShowModal" type="button" data-bs-toggle="modal" data-bs-target="#exampleModallogin">Add</button>
            </div>
        </div>
    </div>

    <!-- Add Modal -->
    <div class="modal fade" id="exampleModallogin" tabindex="-1" role="dialog" aria-labelledby="exampleModallogin" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content dark-sign-up">
                <div class="modal-body social-profile text-start">
                    <div class="modal-toggle-wrapper">
                        <h3>Add Department</h3>
                        <p>Fill in your information below.</p>
                        <EditForm Model="@department" OnValidSubmit="saveDepartment" class="row g-3">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="col-md-12">
                                <label for="name" class="form-label">Department Name</label>
                                <InputText id="name" required class="form-control" @bind-Value="department.Name" />
                                <ValidationMessage For="@(() => department.Name)" />
                            </div>
                            <div class="col-12">
                                <button class="btn btn-primary" type="submit" data-bs-dismiss="modal">Submit</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Departments Table -->
    <div class="col-sm-12">
    <div class="table-responsive mt-4 mt-xl-0">
          <table class="table table-success table-striped table-nowrap align-middle mb-0">
              <thead>
                        <tr class="border-bottom-primary">
                            <th scope="col">Id</th>
                            <th scope="col">Name</th>
                            <th scope="col">Status</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int count = 1;
                        }
                        @foreach (var dep in departments)
                        {
                            <tr class="border-bottom-success">
                                <td>@count</td>
                                <td>@dep.Name</td>
                                <td>@dep.Status</td>
                                <td>
                                    <a href="#" title="Edit" @onclick="@(() => editDepartment(dep))" class="edit" data-bs-toggle="modal" data-bs-target="#editModal">
                                        <i class="fa-solid fa-pencil"></i>
                                    </a>
                                    <a href="#" title="Delete" @onclick="@(() => deleteDepartment(dep))" class="delete" data-bs-toggle="modal" data-bs-target="#exampleModallogin2">
                                        <i class="fa-regular fa-trash-can"></i>
                                    </a>
                                </td>
                            </tr>
                            count++;
                        }
                    </tbody>
                </table>
            </div>
        </div>


    <!-- Edit Modal -->
    <div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModal" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content dark-sign-up">
                <div class="modal-body social-profile text-start">
                    <div class="modal-toggle-wrapper">
                        <h3>Edit Department</h3>
                        <p>Update your information below.</p>
                        <EditForm Model="@department" OnValidSubmit="updateDepartment" class="row g-3">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="col-md-12">
                                <label for="editName" class="form-label">Department Name</label>
                                <InputText id="editName" required class="form-control" @bind-Value="department.Name" />
                                <ValidationMessage For="@(() => department.Name)" />
                            </div>
                            <div class="col-12">
                                <button class="btn btn-primary" type="submit" data-bs-dismiss="modal">Update</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>




  <div class="modal fade" id="exampleModallogin2" tabindex="-1" role="dialog" aria-labelledby="exampleModallogin2" aria-hidden="true">
       <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content dark-sign-up">

                    <div class="modal-toggle-wrapper">
                <h5 class="modal-title" id="exampleModalLongTitle"> <i class="lni lni-trash"></i> Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body social-profile text-start">
                <label>Are you sure you want to delete this Department?</label>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="lni lni-close"></i> Close</button>
                    <button @onclick="completeDelete" type="button" class="btn btn-danger" data-bs-dismiss="modal"><i class="lni lni-trash"></i> Delete</button>
            </div>
        </div>
    </div>
</div>


</div>



    <!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModal" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content dark-sign-up">
                <div class="modal-body social-profile text-start">
                    <div class="modal-toggle-wrapper">
                        <h3>Edit Department</h3>
                        <p>Update your information below.</p>
                    <EditForm Model="@department" OnValidSubmit="updateDepartment" class="row g-3">
                            <div class="col-md-12">
                                <label for="editName" class="form-label">Department Name</label>
                                <InputText id="editName" required class="form-control" @bind-Value="department.Name" />
                            </div>
                            <div class="col-12">
                                <button class="btn btn-primary" type="submit" data-bs-dismiss="modal">Update</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>






@code {
    
    private List<Department> departments = new List<Department>();
    private string modalTitle = "Add Department";
    private SystemDbContext _context;


    private DepartmentRepository _departmentRepository;
    private Department department = new Department()
        {
            CreatedBy = "Admin",
            ModifiedBy = "Admin ",
            Status = "Active"


        };
    protected override void OnInitialized() { 
        base.OnInitialized();
        InitializeDbContext();
        LoadDepartments();
    }

    private void InitializeDbContext() {
        _context = ServiceProvider.GetRequiredService<SystemDbContext>();
        _departmentRepository = new DepartmentRepository(_context);
    }

    private void LoadDepartments()
    {
        Console.WriteLine("am up");
        try
        {
            departments = _departmentRepository.GetAll();
        }
        catch (Exception ex)
        {
            // Handle error (e.g., show a message to the user)
            Console.WriteLine(ex.Message); 
        } 
    }

    private async Task HandleValidSubmit()
    {
        await _departmentRepository.AddAsync(department); // Call the service method

    }

    private void saveDepartment()
    {
        department = _departmentRepository.Add(department);
        LoadDepartments();
        Console.WriteLine("yoooo");
        ResetForm();
    }

    private void editDepartment(Department dept)
    {
        department = dept; // Load the selected department details into the modal
    }

    private void ResetForm()
    {
        department = new Department();
        modalTitle = "Add Department";
    }

    private void deleteDepartment(Department dept)
    {
        department = dept; 
    }

    private void completeDelete()
    {
        try
        {
            if (_departmentRepository.DeleteById(department.Id))
            {
               
                ResetForm();
                LoadDepartments();
            }
        }
        catch (Exception ex)
        {
            // Handle error (e.g., show a message to the user)
            Console.WriteLine(ex.Message);
        }
    }
    private void updateDepartment()
    { // Logic to update the department details 
        departmentRepository.Update(department);
        // Update the UI or refresh the department list
         }

    private void ShowModal()
    { 
        // Use JavaScript interop to show the modal 
        js.InvokeVoidAsync("$('#exampleModallogin').modal", "show");
    }

    private void ShowModal2()
    { 
        // Use JavaScript interop to show the modal 
        js.InvokeVoidAsync("$('#exampleModallogin2').modal", "show");
    }

    private void CloseModal(string modalId)
    {
        js.InvokeVoidAsync($"$('#{modalId}').modal", "hide");
    }
}
