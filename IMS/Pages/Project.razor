

@page "/projects"
@using IMSClassLibrary.Models;
@using IMSClassLibrary.Repos;
@inject UserRepository userRepository
@inject ProjectRepository projectRepository
@inject DepartmentRepository departmentRepository
@inject ModuleRepository moduleRepository
@inject Authorisation authorisation
@inject NotificationService NotificationService;
@inject NavigationManager UriHelper
@inject IHttpContextAccessor httpContextAccessor
@using IMSClassLibrary.Context;
@using Microsoft.EntityFrameworkCore
@inject IServiceProvider ServiceProvider

@inject IJSRuntime js

<PageTitle>Projects</PageTitle>
<!--breadcrumb-->
<div class="container-fluid">

<div class="page-breadcrumb d-none d-sm-flex align-items-center mb-3">
    <div class="breadcrumb-title pe-3">@parentPage.Name</div>
    <div class="ps-3">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-0 p-0">
                <li class="breadcrumb-item">
                    <a href="_Layout"><i class="bx bx-home-alt"></i></a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">@thisPage.Name</li>
            </ol>
        </nav>
    </div>
    <div class="ms-auto">
        <div class="overflow-hidden">
            <div class="btn-group">

                <button class="btn btn-primary mx-auto mt-3" @onclick="ShowModal" type="button" data-bs-toggle="modal" data-bs-target="#exampleModallogin">Add</button>
            </div>
        </div>
    </div>
</div>
<!--end breadcrumb-->



    <div class="col-sm-12">
    <div class="table-responsive mt-4 mt-xl-0">
          <table class="table table-success table-striped table-nowrap align-middle mb-0">
              <thead>
                        <tr class="border-bottom-primary">
                        <th>#</th>
                        <th>Project Name</th>
                        <th>Descripton</th>
                        <th>Department</th>
                        
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int count = 1;
                    }
                    @foreach (var proj in projects)
                    {
                       <tr class="border-bottom-success">
                            <td>@count</td>
                            <td>@proj.Name</td>
                            <td>@proj.Description</td>
                            <td>@proj.DepartmentName</td>
                            
                                                       
                            <td>
                                <a href="#" title="Edit" @onclick="@(()=>editProject(proj))" class="edit" data-bs-toggle="modal" data-bs-target="#editModal" >
                                        <i class="fa-solid fa-pencil"></i>
                                </a>
                                    <a href="#" title="Delete" @onclick="@(()=>deleteProject(proj))" data-bs-toggle="modal" data-bs-target="#exampleModallogin2">
                                        <i class="fa-regular fa-trash-can"></i>
                                </a>
                            </td>
                        </tr>
                        count++;
                    }
                </tbody>

            </table>
        </div>
    </div>
</div>


  <div class="modal fade" id="exampleModallogin2" tabindex="-1" role="dialog" aria-labelledby="exampleModallogin2" aria-hidden="true">
       <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content dark-sign-up">

                    <div class="modal-toggle-wrapper">
                <h5 class="modal-title" id="exampleModalLongTitle"> <i class="lni lni-trash"></i> Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body social-profile text-start">
                <label>Are you sure you want to delete this Project?</label>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="lni lni-close"></i> Close</button>
                    <button @onclick="completeDelete" type="button" class="btn btn-danger" data-bs-dismiss="modal"><i class="lni lni-trash"></i> Delete</button>
            </div>
        </div>
    </div>
</div>


   <div class="modal fade" id="exampleModallogin" tabindex="-1" role="dialog" aria-labelledby="exampleModallogin" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content dark-sign-up">
                <div class="modal-body social-profile text-start">
                    <div class="modal-toggle-wrapper">
                        <h3>Add Department</h3>
                        <p>Fill in your information below.</p>
                        <EditForm Model="@project" OnValidSubmit="saveProject" class="row g-3">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="col-md-12">
                                <label for="name" class="form-label">Peroject Name</label>
                                <InputText id="name" required class="form-control" @bind-Value="project.Name" />
                                <ValidationMessage For="@(() => project.Name)" />
                            </div>
                             <div class="col-md-12">
                                <label for="description" class="form-label">Project Description</label>
                                <InputText id="description" required class="form-control" @bind-Value="project.Description" />
                                <ValidationMessage For="@(() => project.Description)" />
                            </div>
                           <div class="col-md-12">
                            <label for="deptname" class="form-label">Department</label>
                              <InputSelect id="deptname" class="form-control" @bind-Value="project.DepartmentName">
                           <option value="" disabled>Select Department</option>
                    @foreach (var dept in departmentList)
                     {
                             <option value="@dept">@dept</option>
                     }
                            </InputSelect>
                     <ValidationMessage For="@(() => project.DepartmentName)" />

                     </div>

                            <div class="col-12">
                                <button class="btn btn-primary" type="submit" data-bs-dismiss="modal">Submit</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div

        <!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModal" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content dark-sign-up">
                <div class="modal-body social-profile text-start">
                    <div class="modal-toggle-wrapper">
                        <h3>Edit Department</h3>
                        <p>Update your information below.</p>
                     <EditForm Model="@project" OnValidSubmit="updateProjects" class="row g-3">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="col-md-12">
                                <label for="name" class="form-label">Peroject Name</label>
                                <InputText id="name" required class="form-control" @bind-Value="project.Name" />
                                <ValidationMessage For="@(() => project.Name)" />
                            </div>
                             <div class="col-md-12">
                                <label for="description" class="form-label">Project Description</label>
                                <InputText id="description" required class="form-control" @bind-Value="project.Description" />
                                <ValidationMessage For="@(() => project.Description)" />
                            </div>
                           <div class="col-md-12">
                            <label for="deptname" class="form-label">Department</label>
                              <InputSelect id="deptname" class="form-control" @bind-Value="project.DepartmentName">
                           <option value="" disabled>Select Department</option>
                    @foreach (var dept in departmentList)
                     {
                             <option value="@dept">@dept</option>
                     }
                            </InputSelect>
                     <ValidationMessage For="@(() => project.DepartmentName)" />

                     </div>

                            <div class="col-12">
                                <button class="btn btn-primary" type="submit" data-bs-dismiss="modal">Update</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>




@code
{
    private IMSClassLibrary.Models.Project project = new IMSClassLibrary.Models.Project()
           {
            CreatedBy = "Admin",
            ModifiedBy = "Admin ",
            Status = "Active"

        };
    private List<IMSClassLibrary.Models.Project> projects = new List<IMSClassLibrary.Models.Project>();

    private List<string> departmentList = new List<string>();

    private string modalTitle = "Add Department";
    string pageUrl = "projects";

    Module parentPage = new IMSClassLibrary.Models.Module();
    Module thisPage = new IMSClassLibrary.Models.Module();
    private bool isEditing = false;

    private SystemDbContext _context;

    private ProjectRepository _projectRepository;

    private DepartmentRepository _departmentRepository;
  
   

    protected override void OnInitialized() { 
        base.OnInitialized();
        InitializeDbContext();
        LoadProjects();
        LoadDepartments();

    }

    private void InitializeDbContext() {
        _context = ServiceProvider.GetRequiredService<SystemDbContext>();
         _projectRepository = new ProjectRepository(_context);
        _departmentRepository = new DepartmentRepository(_context);
    }

    private void LoadDepartments()
    {
        // Fetch the list of departments from your repository or context
        departmentList = departmentRepository.GetAll().Select(d => d.Name).ToList();
    }


    private void LoadProjects()
    {
        Console.WriteLine("am up");
        try
        {
           projects = _projectRepository.GetAll();
        }
        catch (Exception ex)
        {
            // Handle error (e.g., show a message to the user)
            Console.WriteLine(ex.Message); 
        } 
    }

        private void saveProject()
    {
        project = _projectRepository.Add(project);
        LoadProjects();
        Console.WriteLine("yoooo");
        ResetForm();
    }

   
    private void editProject(IMSClassLibrary.Models.Project pro)
    {
       project = pro; // Load the selected department details into the modal
    }



    private void deleteProject(IMSClassLibrary.Models.Project pro)
    {
        project = pro; 
    }



      private void ResetForm()
    {
        project = new IMSClassLibrary.Models.Project();        
    }


        private void completeDelete()
    {
        try
        {
            if (_projectRepository.DeleteById(project.Id))
            {
               
                ResetForm();
                LoadProjects();
            }
        }
        catch (Exception ex)
        {
            // Handle error (e.g., show a message to the user)
            Console.WriteLine(ex.Message);
        }
    }
        private void updateProjects()
    { // Logic to update the department details 
        projectRepository.Update(project);
        ResetForm();
        // Update the UI or refresh the department list
         }

    private void ShowModal()
    { // Use JavaScript interop to show the modal 
        js.InvokeVoidAsync("$('#exampleModallogin').modal", "show");
    }
    private void ShowModal2()
    { // Use JavaScript interop to show the modal 
        js.InvokeVoidAsync("$('#exampleModallogin2').modal", "show");
    }
    private void CloseModal(string modalId)
    {
        js.InvokeVoidAsync($"$('#{modalId}').modal", "hide");
    }

}
