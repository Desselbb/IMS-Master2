@page "/"
@using IMSClassLibrary.Models
@using IMSClassLibrary.Repos
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager UriHelper
@inject UserRepository userRepository
@inject NotificationService NotificationService
@inject IHttpContextAccessor httpContextAccessor
@layout LoginLayout

<PageTitle>Login</PageTitle>



 <div class="auth-page-wrapper pt-5">
        <!-- auth page bg -->
        <div class="auth-one-bg-position auth-one-bg" id="auth-particles">
            
             <div class="bg-overlay"></div>
          
        </div>

        <!-- auth page content -->
        <div class="auth-page-content">
            <div class="container">
              

                <div class="row justify-content-center">
                    <div class="col-md-8 col-lg-6 col-xl-5">
                        <div class="card mt-4">

                            <div class="card-body p-4">
                                <div class="text-center mt-2">
                                    <h5 class="text-primary">Create New Account</h5>
                                    <p class="text-muted">Get your free velzon account now</p>
                                </div>
                                <div class="p-2 mt-4">
                                   
                                    <EditForm Model="@user" OnValidSubmit="@Login" class="needs-validation" Id="loginForm">

                                        <div class="mb-3">
                                            <label for="useremail" class="form-label">Email <span class="text-danger">*</span></label>
                                             <InputText type="email" class="form-control" id="useremail" @bind-Value="user.Email" placeholder="Enter email address" required/>
                                            <div class="invalid-feedback">
                                                Please enter email
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label" for="password-input">Password</label>
                                            <div class="position-relative auth-pass-inputgroup">
                                                 <InputText type="password" @bind-Value="user.Password" class="form-control pe-5 password-input" onpaste="return false" placeholder="Enter password" id="password-input" aria-describedby="passwordInput" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" required/>
                                                <button class="btn btn-link position-absolute end-0 top-0 text-decoration-none text-muted password-addon" type="button" id="password-addon"><i class="ri-eye-fill align-middle"></i></button>


                                                <div class="invalid-feedback">
                                                    Please enter password
                                                </div>
                                            </div>
                                        </div>

                                        <div class="mb-4">
                                            <p class="mb-0 fs-12 text-muted fst-italic">By registering you agree to the Velzon <a href="#" class="text-primary text-decoration-underline fst-normal fw-medium">Terms of Use</a></p>
                                        </div>

                                        <div id="password-contain" class="p-3 bg-light mb-2 rounded">
                                            <h5 class="fs-13">Password must contain:</h5>
                                            <p id="pass-length" class="invalid fs-12 mb-2">Minimum <b>8 characters</b></p>
                                            <p id="pass-lower" class="invalid fs-12 mb-2">At <b>lowercase</b> letter (a-z)</p>
                                            <p id="pass-upper" class="invalid fs-12 mb-2">At least <b>uppercase</b> letter (A-Z)</p>
                                            <p id="pass-number" class="invalid fs-12 mb-0">A least <b>number</b> (0-9)</p>
                                        </div>

                                        <div class="mt-4">
                                            <button class="btn btn-success w-100" type="submit" onclick="validateForm(event)">Sign Up</button>
                                        </div>

       
                                   </EditForm>

                                </div>
                            </div>
                            <!-- end card body -->
                        </div>
                        <!-- end card -->

                        <div class="mt-4 text-center">
                            <p class="mb-0">Already have an account ? <a href="auth-signin-basic.html" class="fw-semibold text-primary text-decoration-underline"> Signin </a> </p>
                        </div>

                    </div>
                </div>
                <!-- end row -->
            </div>
            <!-- end container -->
        </div>
        <!-- end auth page content -->

       

    </div>
    <!-- end auth-page-wrapper -->

@code {
    private User user = new User();
    private string errorMessage;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ResetUser();
    }

    private void ResetUser()
    {
        user = new User
        {
            CreatedBy = "",
            ModifiedBy = "",
            CreatedDate = DateTime.Now,
            ModifiedDate = DateTime.Now,
            FirstName = "",
            LastName = ""
        };
    }

    private async Task Login()
    {
        try
        {
            // Validate the password using ASP.NET Identity
            var result = await SignInManager.PasswordSignInAsync(user.Email, user.Password, isPersistent: false, lockoutOnFailure: false);

            if (result.Succeeded)
            {
                Console.WriteLine("Login succeeded");
                httpContextAccessor.HttpContext.Session.SetString("email", user.Email);
                // Redirect to the dashboard or another page after successful login
                UriHelper.NavigateTo("AdminDashboard");
            }
            else if (result.IsLockedOut)
            {
                Console.WriteLine(errorMessage);
                errorMessage = "Your account has been locked. Please try again later.";
            }
            else
            {
                Console.WriteLine(errorMessage);
                ResetUser();
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
}
