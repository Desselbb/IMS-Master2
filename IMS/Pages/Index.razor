@page "/"
@using IMSClassLibrary.Models
@using IMSClassLibrary.Repos
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager UriHelper
@inject UserRepository userRepository
@inject NotificationService NotificationService
@inject IHttpContextAccessor httpContextAccessor
@using IMSClassLibrary.Context;
@using Microsoft.EntityFrameworkCore
@inject IServiceProvider ServiceProvider
@layout LoginLayout

<PageTitle>Login</PageTitle>



 <div class="auth-page-wrapper pt-5">
        <!-- auth page bg -->
        <div class="auth-one-bg-position auth-one-bg" id="auth-particles">
            
             <div class="bg-overlay"></div>
          
        </div>

        <!-- auth page content -->
        <div class="auth-page-content">
            <div class="container">
              

                <div class="row justify-content-center">
                    <div class="col-md-8 col-lg-6 col-xl-5">
                        <div class="card mt-4">

                            <div class="card-body p-4">
                                <div class="text-center mt-2">
                                    <h5 class="text-primary">Intern Information System</h5>
                                    
                                </div>
                                <div class="p-2 mt-4">
                                   
                                    <EditForm Model="@user" OnValidSubmit="@Login" class="needs-validation" Id="loginForm">

                                        <div class="mb-3">
                                            <label for="useremail" class="form-label">Email <span class="text-danger">*</span></label>
                                             <InputText type="email" class="form-control" id="useremail" @bind-Value="user.Email" placeholder="Enter email address" required/>
                                            <div class="invalid-feedback">
                                                Please enter email
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label" for="password-input">Password</label>
                                            <div class="position-relative auth-pass-inputgroup">
                                                 <InputText type="password" @bind-Value="user.Password" class="form-control pe-5 password-input" onpaste="return false" placeholder="Enter password" id="password-input" aria-describedby="passwordInput" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" required/>
                                                <button class="btn btn-link position-absolute end-0 top-0 text-decoration-none text-muted password-addon" type="button" id="password-addon"><i class="ri-eye-fill align-middle"></i></button>


                                                <div class="invalid-feedback">
                                                    Please enter password
                                                </div>
                                            </div>
                                        </div>

                                       

                                        <div id="password-contain" class="p-3 bg-light mb-2 rounded">
                                            <h5 class="fs-13">Password must contain:</h5>
                                            <p id="pass-length" class="invalid fs-12 mb-2">Minimum <b>8 characters</b></p>
                                            <p id="pass-lower" class="invalid fs-12 mb-2">At <b>lowercase</b> letter (a-z)</p>
                                            <p id="pass-upper" class="invalid fs-12 mb-2">At least <b>uppercase</b> letter (A-Z)</p>
                                            <p id="pass-number" class="invalid fs-12 mb-0">A least <b>number</b> (0-9)</p>
                                        </div>

                                        <div class="mt-4">
                                            <button class="btn btn-success w-100" type="submit" onclick="validateForm(event)">Sign Up</button>
                                        </div>

       
                                   </EditForm>

                                </div>
                            </div>
                            <!-- end card body -->
                        </div>
                        <!-- end card -->

                    </div>
                </div>
                <!-- end row -->
            </div>
            <!-- end container -->
        </div>
        <!-- end auth page content -->

       

    </div>
    <!-- end auth-page-wrapper -->

@code {
    private User user = new User();
    private List<User> users = new List<User>
{
    new User { Id = 1, FirstName = "John", LastName = "Doe", Email = "john.doe@example.com", Password = "password123", DepartmentName = "IT", Nrc = "12345678", Address = "123 Main St", CreatedBy = "Admin", ModifiedBy = "Admin", CreatedDate = DateTime.Now, ModifiedDate = DateTime.Now },
    new User { Id = 2, FirstName = "Jane", LastName = "Smith", Email = "jane.smith@example.com", Password = "Password456!", DepartmentName = "HR", Nrc = "87654321", Address = "456 Elm St", CreatedBy = "Admin", ModifiedBy = "Admin", CreatedDate = DateTime.Now, ModifiedDate = DateTime.Now },
    new User { Id = 3, FirstName = "Blessed", LastName = "Simalimbu", Email = "blessedsimalimbu@gmail.com", Password = "Simalimbu123!", DepartmentName = "IT", Nrc = "98765432", Address = "789 Oak St", CreatedBy = "Admin", ModifiedBy = "Admin", CreatedDate = DateTime.Now, ModifiedDate = DateTime.Now }

    // Add more users as needed
};

    private string errorMessage;
    private UserRepository _userRepository;
    private SystemDbContext _context;

    protected override void OnInitialized()
{
    base.OnInitialized();
    ResetUser(); // Ensure the user object is initialized
}

private void ResetUser()
{
    user = new User
    {
        CreatedBy = "",
        ModifiedBy = "",
        CreatedDate = DateTime.Now,
        ModifiedDate = DateTime.Now,
        FirstName = "",
        LastName = ""
    };
}
private void InitializeDbContext()
{
    if (ServiceProvider != null)
    {
        _context = ServiceProvider.GetRequiredService<SystemDbContext>();
        _userRepository = new UserRepository(_context);
    }
    else
    {
        Console.WriteLine("ServiceProvider is null");
    }
}


   private void Login()
{
    var foundUser = users.FirstOrDefault(u => u.Email == user.Email && u.Password == user.Password);
    
    if (foundUser != null)
    {
        Console.WriteLine("Login succeeded");
        httpContextAccessor.HttpContext.Session.SetString("email", foundUser.Email);
        // Redirect to the dashboard or another page after successful login
        UriHelper.NavigateTo("AdminDashboard");
    }
    else
    {
        Console.WriteLine("Invalid email or password.");
        ResetUser();
        errorMessage = "Invalid email or password.";
    }
}
 private void LoadUsers()
    {
        Console.WriteLine("am up");
        try
        {
            users = _userRepository.GetAll();
        }
        catch (Exception ex)
        {
            // Handle error (e.g., show a message to the user)
            Console.WriteLine(ex.Message);
        }
    }
   


}
