@page "/internprojects"
@using IMSClassLibrary.Models
@using IMSClassLibrary.Repos
@using Microsoft.AspNetCore.Identity
@inject UserRepository userRepository
@inject ProjectRepository projectRepository
@inject DepartmentRepository departmentRepository
@inject ModuleRepository moduleRepository
@inject Authorisation authorisation
@using IMSClassLibrary.Context
@inject IServiceProvider ServiceProvider
@inject UserManager<IdentityUser> userManager
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Projects</PageTitle>
<!--breadcrumb-->
<div class="page-breadcrumb d-none d-sm-flex align-items-center mb-3">
    <div class="breadcrumb-title pe-3">@parentPage.Name</div>
    <div class="ps-3">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-0 p-0">
                <li class="breadcrumb-item">
                    <a href="_Layout"><i class="bx bx-home-alt"></i></a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">@thisPage.Name</li>
            </ol>
        </nav>
    </div>
    <div class="ms-auto">
        <div class="overflow-hidden">
            <div class="btn-group">
                <button class="btn btn-primary mx-auto mt-3" @onclick="ShowModal" data-bs-toggle="modal" data-bs-target="#exampleModallogin">Add</button>
            </div>
        </div>
    </div>
</div>
<!--end breadcrumb-->

<!-- Modal -->
<div class="modal fade" id="exampleModallogin" tabindex="-1" aria-labelledby="exampleModalloginLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalloginLabel">Add Project</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Modal content here -->
                <EditForm Model="@project" OnValidSubmit="@LoadProjects" class="theme-form">
                    <div class="form-group">
                        <label class="col-form-label">Project Name</label>
                        <InputText class="form-control" @bind-Value="project.Name" required />
                    </div>
                    <div class="form-group">
                        <label class="col-form-label">Description</label>
                        <InputText class="form-control" @bind-Value="project.Description" required />
                    </div>
                    <div class="form-group mb-0">
                        <button class="btn btn-primary btn-block w-100" type="submit">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table id="example2" class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Project Name</th>
                        <th>Description</th>
                        <th>Department</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int count = 1;
                    }
                    @foreach (var proj in projects)
                    {
                        <tr>
                            <td>@count</td>
                            <td>@proj.Name</td>
                            <td>@proj.Description</td>
                            <td>@proj.DepartmentName</td>
                            <td>@proj.Status</td>
                            <td><a href="#" @onclick="ShowModal" data-bs-toggle="modal" data-bs-target="#exampleModallogin">Add Log</a></td>
                        </tr>
                        count++;
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private IMSClassLibrary.Models.Project project = new IMSClassLibrary.Models.Project();
    private List<IMSClassLibrary.Models.Project> projects = new List<IMSClassLibrary.Models.Project>();
    private List<IMSClassLibrary.Models.InternProject> internprojects = new List<IMSClassLibrary.Models.InternProject>();
    private IMSClassLibrary.Models.InternProject internproject = new IMSClassLibrary.Models.InternProject();
    
    Module parentPage = new IMSClassLibrary.Models.Module();
    Module thisPage = new IMSClassLibrary.Models.Module();

    private SystemDbContext _context;
    private ProjectRepository _projectRepository;
    private DepartmentRepository _departmentRepository;
    private InternProjectRepository _internProjectRepository;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InitializeDbContext();
        LoadProjects();
    }

    private void InitializeDbContext()
    {
        _context = ServiceProvider.GetRequiredService<SystemDbContext>();
        _projectRepository = new ProjectRepository(_context);
        _departmentRepository = new DepartmentRepository(_context);
        _internProjectRepository = new InternProjectRepository(_context);
    }

    private async Task LoadProjects() {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync(); 
        var user = authState.User;
        var userId = (await userManager.GetUserAsync(user)).Id;
        internprojects = _internProjectRepository.GetProjectsByUser(userId);

        if (projects == null || !projects.Any()) {
            Console.WriteLine("No projects found or error occurred.");
        }
    }

    private void ResetForm()
    {
        project = new IMSClassLibrary.Models.Project();
    }

    private void ShowModal()
    {
        // Logic to set up the modal, if any
    }


}